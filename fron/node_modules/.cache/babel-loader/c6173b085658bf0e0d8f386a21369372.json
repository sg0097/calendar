{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\Desktop\\\\calendar\\\\fron\\\\src\\\\components\\\\cal.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport DayCell from \"./daycell\";\nimport \"../styles/calendar.css\";\nconst Calendar = () => {\n  const [currentDate, setCurrentDate] = useState(new Date(2024, 0, 1));\n  const [holidays, setHolidays] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(2024);\n\n  // Fetch holidays based on the selected year and month\n  const fetchHolidays = async () => {\n    const month = currentDate.getMonth() + 1;\n    try {\n      const response = await fetch(`http://localhost:8089/api/holidays?year=${selectedYear}&month=${month}`);\n      const data = await response.json();\n      console.log(\"Fetched holidays:\", data); // Debugging log\n      setHolidays(data); // Update state\n    } catch (error) {\n      console.error(\"Error fetching holidays:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchHolidays();\n  }, [currentDate, selectedYear]);\n  const prevMonth = () => {\n    const prev = new Date(currentDate);\n    prev.setMonth(prev.getMonth() - 1);\n    if (prev.getFullYear() < 2024) return;\n    setCurrentDate(prev);\n  };\n  const nextMonth = () => {\n    const next = new Date(currentDate);\n    next.setMonth(next.getMonth() + 1);\n    if (next.getFullYear() > 2029) return;\n    setCurrentDate(next);\n  };\n  const refreshHolidays = () => {\n    fetchHolidays(); // Re-fetch holidays when needed\n  };\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  const dayCells = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const dateStr = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n    const holidaysForDay = holidays.filter(h => h.date === dateStr);\n    dayCells.push(/*#__PURE__*/React.createElement(DayCell, {\n      key: dateStr,\n      date: dateStr,\n      holidays: holidaysForDay,\n      refreshHolidays: refreshHolidays,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: prevMonth,\n    className: \"nav-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedYear,\n    onChange: e => setSelectedYear(parseInt(e.target.value, 10)),\n    className: \"year-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, [...Array(6)].map((_, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: 2024 + i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, 2024 + i))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, currentDate.toLocaleString(\"default\", {\n    month: \"long\"\n  }), \" \", selectedYear), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: nextMonth,\n    className: \"nav-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Next\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchHolidays,\n    className: \"fetch-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Fetch Holidays\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, dayCells));\n};\nexport default Calendar;","map":{"version":3,"names":["React","useState","useEffect","DayCell","Calendar","currentDate","setCurrentDate","Date","holidays","setHolidays","selectedYear","setSelectedYear","fetchHolidays","month","getMonth","response","fetch","data","json","console","log","error","prevMonth","prev","setMonth","getFullYear","nextMonth","next","refreshHolidays","daysInMonth","getDate","dayCells","day","dateStr","toString","padStart","holidaysForDay","filter","h","date","push","createElement","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","value","onChange","e","parseInt","target","Array","map","_","i","toLocaleString"],"sources":["C:/Users/shiva/OneDrive/Desktop/calendar/fron/src/components/cal.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DayCell from \"./daycell\";\r\nimport \"../styles/calendar.css\";\r\n\r\nconst Calendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date(2024, 0, 1));\r\n  const [holidays, setHolidays] = useState([]);\r\n  const [selectedYear, setSelectedYear] = useState(2024);\r\n\r\n  // Fetch holidays based on the selected year and month\r\n  const fetchHolidays = async () => {\r\n    const month = currentDate.getMonth() + 1;\r\n    try {\r\n      const response = await fetch(`http://localhost:8089/api/holidays?year=${selectedYear}&month=${month}`);\r\n      const data = await response.json();\r\n      console.log(\"Fetched holidays:\", data); // Debugging log\r\n      setHolidays(data); // Update state\r\n    } catch (error) {\r\n      console.error(\"Error fetching holidays:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHolidays();\r\n  }, [currentDate, selectedYear]);\r\n\r\n  const prevMonth = () => {\r\n    const prev = new Date(currentDate);\r\n    prev.setMonth(prev.getMonth() - 1);\r\n    if (prev.getFullYear() < 2024) return;\r\n    setCurrentDate(prev);\r\n  };\r\n\r\n  const nextMonth = () => {\r\n    const next = new Date(currentDate);\r\n    next.setMonth(next.getMonth() + 1);\r\n    if (next.getFullYear() > 2029) return;\r\n    setCurrentDate(next);\r\n  };\r\n\r\n  const refreshHolidays = () => {\r\n    fetchHolidays(); // Re-fetch holidays when needed\r\n  };\r\n\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n  const dayCells = [];\r\n\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    const dateStr = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)\r\n      .toString()\r\n      .padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\r\n    const holidaysForDay = holidays.filter((h) => h.date === dateStr);\r\n\r\n    dayCells.push(\r\n      <DayCell key={dateStr} date={dateStr} holidays={holidaysForDay} refreshHolidays={refreshHolidays} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <div className=\"calendar-header\">\r\n        <button onClick={prevMonth} className=\"nav-button\">Prev</button>\r\n        \r\n        {/* Year Dropdown */}\r\n        <select \r\n          value={selectedYear} \r\n          onChange={(e) => setSelectedYear(parseInt(e.target.value, 10))}\r\n          className=\"year-dropdown\"\r\n        >\r\n          {[...Array(6)].map((_, i) => (\r\n            <option key={i} value={2024 + i}>{2024 + i}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <h2>{currentDate.toLocaleString(\"default\", { month: \"long\" })} {selectedYear}</h2>\r\n\r\n        <button onClick={nextMonth} className=\"nav-button\">Next</button>\r\n      </div>\r\n\r\n      {/* Fetch Holidays Button */}\r\n      <button onClick={fetchHolidays} className=\"fetch-button\">Fetch Holidays</button>\r\n\r\n      <div className=\"calendar-grid\">{dayCells}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}