{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\Desktop\\\\calendar\\\\fron\\\\src\\\\components\\\\cal.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport DayCell from \"./daycell\";\nimport \"../styles/calendar.css\";\nconst Calendar = () => {\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const [holidays, setHolidays] = useState([]); // Stores holidays for the selected year\n\n  // Function to fetch holidays for the selected year\n  const fetchHolidaysForYear = async () => {\n    try {\n      const response = await fetch(`http://localhost:8089/api/holidays?year=${selectedYear}`);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`Fetched holidays for ${selectedYear}:`, data); // ✅ Debugging log\n\n      setHolidays(data); // ✅ Store only holidays for the selected year\n    } catch (error) {\n      console.error(\"Error fetching holidays:\", error);\n    }\n  };\n\n  // Fetch holidays when the year changes\n  useEffect(() => {\n    fetchHolidaysForYear();\n  }, [selectedYear]);\n\n  // Get holidays only for the selected month\n  const filteredHolidays = holidays.filter(h => {\n    const month = Number(h.date.split(\"-\")[1]); // Extract month from date\n    return month === currentMonth + 1;\n  });\n  const prevMonth = () => setCurrentMonth(prev => prev === 0 ? 11 : prev - 1);\n  const nextMonth = () => setCurrentMonth(prev => prev === 11 ? 0 : prev + 1);\n  const daysInMonth = new Date(selectedYear, currentMonth + 1, 0).getDate();\n  const dayCells = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const dateStr = `${selectedYear}-${(currentMonth + 1).toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n    const holidaysForDay = filteredHolidays.filter(h => h.date === dateStr);\n    dayCells.push(/*#__PURE__*/React.createElement(DayCell, {\n      key: dateStr,\n      date: dateStr,\n      holidays: holidaysForDay,\n      refreshHolidays: fetchHolidaysForYear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: prevMonth,\n    className: \"nav-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, new Date(selectedYear, currentMonth).toLocaleString(\"default\", {\n    month: \"long\"\n  }), \" \", selectedYear), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: nextMonth,\n    className: \"nav-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Next\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedYear,\n    onChange: e => setSelectedYear(Number(e.target.value)),\n    className: \"year-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, Array.from({\n    length: 6\n  }, (_, i) => 2024 + i).map(year => /*#__PURE__*/React.createElement(\"option\", {\n    key: year,\n    value: year,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, year))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchHolidaysForYear,\n    className: \"fetch-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Fetch Holidays\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, dayCells));\n};\nexport default Calendar;","map":{"version":3,"names":["React","useState","useEffect","DayCell","Calendar","selectedYear","setSelectedYear","Date","getFullYear","currentMonth","setCurrentMonth","getMonth","holidays","setHolidays","fetchHolidaysForYear","response","fetch","ok","Error","status","data","json","console","log","error","filteredHolidays","filter","h","month","Number","date","split","prevMonth","prev","nextMonth","daysInMonth","getDate","dayCells","day","dateStr","toString","padStart","holidaysForDay","push","createElement","key","refreshHolidays","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","toLocaleString","value","onChange","e","target","Array","from","length","_","i","map","year"],"sources":["C:/Users/shiva/OneDrive/Desktop/calendar/fron/src/components/cal.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DayCell from \"./daycell\";\r\nimport \"../styles/calendar.css\";\r\n\r\nconst Calendar = () => {\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\r\n  const [holidays, setHolidays] = useState([]); // Stores holidays for the selected year\r\n\r\n  // Function to fetch holidays for the selected year\r\n  const fetchHolidaysForYear = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8089/api/holidays?year=${selectedYear}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(`Fetched holidays for ${selectedYear}:`, data); // ✅ Debugging log\r\n\r\n      setHolidays(data); // ✅ Store only holidays for the selected year\r\n    } catch (error) {\r\n      console.error(\"Error fetching holidays:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch holidays when the year changes\r\n  useEffect(() => {\r\n    fetchHolidaysForYear();\r\n  }, [selectedYear]);\r\n\r\n  // Get holidays only for the selected month\r\n  const filteredHolidays = holidays.filter((h) => {\r\n    const month = Number(h.date.split(\"-\")[1]); // Extract month from date\r\n    return month === currentMonth + 1;\r\n  });\r\n\r\n  const prevMonth = () => setCurrentMonth((prev) => (prev === 0 ? 11 : prev - 1));\r\n  const nextMonth = () => setCurrentMonth((prev) => (prev === 11 ? 0 : prev + 1));\r\n\r\n  const daysInMonth = new Date(selectedYear, currentMonth + 1, 0).getDate();\r\n  const dayCells = [];\r\n\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    const dateStr = `${selectedYear}-${(currentMonth + 1).toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\r\n    const holidaysForDay = filteredHolidays.filter((h) => h.date === dateStr);\r\n\r\n    dayCells.push(\r\n      <DayCell key={dateStr} date={dateStr} holidays={holidaysForDay} refreshHolidays={fetchHolidaysForYear} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <div className=\"calendar-header\">\r\n        <button onClick={prevMonth} className=\"nav-button\">Prev</button>\r\n        <h2>{new Date(selectedYear, currentMonth).toLocaleString(\"default\", { month: \"long\" })} {selectedYear}</h2>\r\n        <button onClick={nextMonth} className=\"nav-button\">Next</button>\r\n\r\n        {/* Year Dropdown */}\r\n        <select value={selectedYear} onChange={(e) => setSelectedYear(Number(e.target.value))} className=\"year-dropdown\">\r\n          {Array.from({ length: 6 }, (_, i) => 2024 + i).map((year) => (\r\n            <option key={year} value={year}>{year}</option>\r\n          ))}\r\n        </select>\r\n\r\n        {/* Fetch Button */}\r\n        <button onClick={fetchHolidaysForYear} className=\"fetch-button\">Fetch Holidays</button>\r\n      </div>\r\n\r\n      <div className=\"calendar-grid\">{dayCells}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}