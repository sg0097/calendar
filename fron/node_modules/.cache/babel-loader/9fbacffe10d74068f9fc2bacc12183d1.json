{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\Desktop\\\\calendar\\\\fron\\\\src\\\\components\\\\cal.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport DayCell from \"./daycell\";\nconst Calendar = () => {\n  const startYear = 2024;\n  const endYear = 2029;\n\n  // Start at January 2024\n  const [currentDate, setCurrentDate] = useState(new Date(startYear, 0, 1));\n  const [holidays, setHolidays] = useState([]);\n\n  // Fetch holidays from backend for the current month\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      const month = currentDate.getMonth() + 1; // JavaScript months are 0-indexed\n      const year = currentDate.getFullYear();\n      try {\n        const response = await fetch(`http://localhost:8089/api/holidays?year=${year}&month=${month}`);\n        const data = await response.json();\n        setHolidays(data || []);\n      } catch (error) {\n        console.error(\"Error fetching holidays:\", error);\n      }\n    };\n    fetchHolidays();\n  }, [currentDate]);\n  const prevMonth = () => {\n    const prev = new Date(currentDate);\n    prev.setMonth(prev.getMonth() - 1);\n    if (prev.getFullYear() < startYear) return; // limit to 2024 and beyond\n    setCurrentDate(prev);\n  };\n  const nextMonth = () => {\n    const next = new Date(currentDate);\n    next.setMonth(next.getMonth() + 1);\n    if (next.getFullYear() > endYear) return; // limit to 2029\n    setCurrentDate(next);\n  };\n\n  // Calculate days in current month\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  const dayCells = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    // Format date as \"YYYY-M-D\"\n    const dateStr = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${day}`;\n    // Filter holidays for this day (guarding against null)\n    const holidaysForDay = (holidays || []).filter(h => h.date === dateStr);\n    dayCells.push(/*#__PURE__*/React.createElement(DayCell, {\n      key: dateStr,\n      date: dateStr,\n      holidays: holidaysForDay,\n      refreshHolidays: () => setCurrentDate(new Date(currentDate)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  // Header row for day names\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-between items-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: prevMonth,\n    className: \"bg-blue-500 text-white px-3 py-1 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-xl font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, currentDate.toLocaleString(\"default\", {\n    month: \"long\"\n  }), \" \", currentDate.getFullYear()), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: nextMonth,\n    className: \"bg-blue-500 text-white px-3 py-1 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Next\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-7 gap-2 font-bold text-center mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, dayNames.map((day, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"border p-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, day))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-7 gap-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, dayCells));\n};\nexport default Calendar;","map":{"version":3,"names":["React","useState","useEffect","DayCell","Calendar","startYear","endYear","currentDate","setCurrentDate","Date","holidays","setHolidays","fetchHolidays","month","getMonth","year","getFullYear","response","fetch","data","json","error","console","prevMonth","prev","setMonth","nextMonth","next","daysInMonth","getDate","dayCells","day","dateStr","holidaysForDay","filter","h","date","push","createElement","key","refreshHolidays","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dayNames","className","onClick","toLocaleString","map","index"],"sources":["C:/Users/shiva/OneDrive/Desktop/calendar/fron/src/components/cal.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DayCell from \"./daycell\";\r\n\r\nconst Calendar = () => {\r\n  const startYear = 2024;\r\n  const endYear = 2029;\r\n\r\n  // Start at January 2024\r\n  const [currentDate, setCurrentDate] = useState(new Date(startYear, 0, 1));\r\n  const [holidays, setHolidays] = useState([]);\r\n\r\n  // Fetch holidays from backend for the current month\r\n  useEffect(() => {\r\n    const fetchHolidays = async () => {\r\n      const month = currentDate.getMonth() + 1; // JavaScript months are 0-indexed\r\n      const year = currentDate.getFullYear();\r\n      try {\r\n        const response = await fetch(`http://localhost:8089/api/holidays?year=${year}&month=${month}`);\r\n        const data = await response.json();\r\n        setHolidays(data || []);\r\n      } catch (error) {\r\n        console.error(\"Error fetching holidays:\", error);\r\n      }\r\n    };\r\n    fetchHolidays();\r\n  }, [currentDate]);\r\n\r\n  const prevMonth = () => {\r\n    const prev = new Date(currentDate);\r\n    prev.setMonth(prev.getMonth() - 1);\r\n    if (prev.getFullYear() < startYear) return; // limit to 2024 and beyond\r\n    setCurrentDate(prev);\r\n  };\r\n\r\n  const nextMonth = () => {\r\n    const next = new Date(currentDate);\r\n    next.setMonth(next.getMonth() + 1);\r\n    if (next.getFullYear() > endYear) return; // limit to 2029\r\n    setCurrentDate(next);\r\n  };\r\n\r\n  // Calculate days in current month\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n  const dayCells = [];\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    // Format date as \"YYYY-M-D\"\r\n    const dateStr = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${day}`;\r\n    // Filter holidays for this day (guarding against null)\r\n    const holidaysForDay = (holidays || []).filter(h => h.date === dateStr);\r\n    dayCells.push(\r\n      <DayCell\r\n        key={dateStr}\r\n        date={dateStr}\r\n        holidays={holidaysForDay}\r\n        refreshHolidays={() => setCurrentDate(new Date(currentDate))}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Header row for day names\r\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <button onClick={prevMonth} className=\"bg-blue-500 text-white px-3 py-1 rounded\">\r\n          Prev\r\n        </button>\r\n        <h2 className=\"text-xl font-bold\">\r\n          {currentDate.toLocaleString(\"default\", { month: \"long\" })} {currentDate.getFullYear()}\r\n        </h2>\r\n        <button onClick={nextMonth} className=\"bg-blue-500 text-white px-3 py-1 rounded\">\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      {/* Day names header */}\r\n      <div className=\"grid grid-cols-7 gap-2 font-bold text-center mb-2\">\r\n        {dayNames.map((day, index) => (\r\n          <div key={index} className=\"border p-1\">\r\n            {day}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Calendar grid */}\r\n      <div className=\"grid grid-cols-7 gap-2\">\r\n        {dayCells}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}